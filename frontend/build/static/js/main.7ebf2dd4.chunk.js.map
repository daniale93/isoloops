{"version":3,"sources":["components/SongTable.jsx","App.jsx","index.js"],"names":["SongTable","_ref","songs","console","log","_jsxs","className","children","_jsx","length","map","song","index","videoId","YOUTUBE_URL","URL","searchParams","get","start","START_TIME","parseInt","split","reduce","acc","t","TITLE","SAMPLE_TYPE","replace","GENRE","width","height","src","title","frameBorder","allowFullScreen","DESCRIPTION","colSpan","App","genreFilter","setGenreFilter","useState","typeFilter","setTypeFilter","surpriseSong","setSurpriseSong","songsData","setSongsData","useEffect","axios","then","response","data","normalized","samples","sample","youtube_url","start_time","END_TIME","end_time","sample_type","description","genre","DECADE","decade","START_SECONDS","start_seconds","END_SECONDS","end_seconds","DURATION","duration","catch","error","genres","Set","sampleTypes","filteredSongs","filter","Tag","value","label","active","onClick","color","classMap","green","blue","alt","randIndex","Math","floor","random","_Fragment","idx","type","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ebf2dd4.chunk.js","sourcesContent":["import React from 'react';\nconst SongTable = ({ songs }) => {\n  console.log('Songs in SongTable:', songs);  // Log the songs prop to check if it's passed correctly\n  return (\n    <table className=\"w-full text-sm border-collapse\">\n      <thead>\n        <tr className=\"bg-gray-200 text-left\">\n          <th className=\"p-2\">Title</th>\n          <th className=\"p-2\">Sample Type</th>\n          <th className=\"p-2\">Genre</th>\n          <th className=\"p-2\">Preview</th>\n          <th className=\"p-2\">Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {songs && songs.length > 0 ? (\n          songs.map((song, index) => {\n            const videoId = song.YOUTUBE_URL\n              ? new URL(song.YOUTUBE_URL).searchParams.get('v')\n              : null;\n\n            const start = song.START_TIME\n              ? parseInt(song.START_TIME.split(':').reduce((acc, t) => 60 * acc + +t, 0))\n              : 0;\n\n            return (\n              <tr key={index} className=\"border-t\">\n                <td className=\"p-2\">{song.TITLE || 'Unknown Title'}</td>\n                <td className=\"p-2\">\n                  <span className=\"inline-block px-2 py-1 text-xs font-medium text-white bg-blue-600 rounded-full\">\n                    {song.SAMPLE_TYPE ? song.SAMPLE_TYPE.replace('_', ' ') : 'Unknown Sample Type'}\n                  </span>\n                </td>\n                <td className=\"p-2\">\n                  <span className=\"inline-block px-2 py-1 text-xs font-medium text-white bg-green-600 rounded-full\">\n                    {song.GENRE || 'Unknown Genre'}\n                  </span>\n                </td>\n                <td className=\"p-2\">\n                  {videoId ? (\n                    <iframe\n                      width=\"200\"\n                      height=\"113\"\n                      src={`https://www.youtube.com/embed/${videoId}?start=${start}`}\n                      title={`Sample video for ${song.TITLE || 'track'}`}   \n                      frameBorder=\"0\"\n                      allowFullScreen\n                    ></iframe>\n                  ) : (\n                    <span>No Preview</span>\n                  )}\n                </td>\n                <td className=\"p-2\">{song.DESCRIPTION || 'No Description'}</td>\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td colSpan=\"5\" className=\"p-2 text-center\">No songs available</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n};\nexport default SongTable;","import React, { useState, useEffect } from 'react';\nimport SongTable from './components/SongTable';\nimport axios from 'axios';\n\nconst App = () => {\n  const [genreFilter, setGenreFilter] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [surpriseSong, setSurpriseSong] = useState(null);\n  const [songsData, setSongsData] = useState([]); // To store songs data fetched from Snowflake\n\n  // Fetch data from the backend API (which queries Snowflake)\n  useEffect(() => {\n    axios\n      .get('https://isoloops-api.vercel.app/api/query.py')// Correct API endpoint\n      .then((response) => {\n        console.log('Fetched data:', response.data);  // Check if data is coming through\n        const rawData = response.data.samples || [];\n        \n        const normalized = rawData.map((sample) => ({\n          ...sample,\n          TITLE: sample.title,\n          YOUTUBE_URL: sample.youtube_url,\n          START_TIME: sample.start_time,\n          END_TIME: sample.end_time,\n          SAMPLE_TYPE: sample.sample_type,\n          DESCRIPTION: sample.description,\n          GENRE: sample.genre,\n          DECADE: sample.decade,\n          START_SECONDS: sample.start_seconds,\n          END_SECONDS: sample.end_seconds,\n          DURATION: sample.duration\n        }));\n        \n        console.log(\"Normalized songs:\", normalized);  // Log the normalized data\n        setSongsData(normalized);\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);// Empty dependency array ensures this runs only once on component mount\n\n  // Extract unique genres and sample types for filtering\n  const genres = [...new Set(songsData.map((song) => song.GENRE))];\n  const sampleTypes = [...new Set(songsData.map((song) => song.SAMPLE_TYPE))];\n\n  // Filter songs based on genre and sample type\n  const filteredSongs = surpriseSong\n    ? [surpriseSong]\n    : songsData.filter((song) => {\n        return (\n          (genreFilter === '' || song.GENRE === genreFilter) &&\n          (typeFilter === '' || song.SAMPLE_TYPE === typeFilter)\n        );\n      });\n\n  // Tag component for genre and sample type filters\n  const Tag = ({ value, label, active, onClick, color }) => {\n    const base = 'px-3 py-1 text-sm rounded-full font-medium transition';\n    const classMap = {\n      green: active\n        ? 'bg-green-600 text-white'\n        : 'bg-green-100 text-green-800 hover:bg-green-200',\n      blue: active\n        ? 'bg-blue-600 text-white'\n        : 'bg-blue-100 text-blue-800 hover:bg-blue-200',\n    };\n\n    return (\n      <button\n        onClick={() => onClick(value)}\n        className={`${base} ${classMap[color]}`}\n      >\n        {label}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-6\">\n      <div className=\"max-w-6xl mx-auto bg-white shadow-md rounded-2xl p-6\">\n        <div className=\"flex items-center gap-3 mb-2\">\n          <img\n            src=\"/isoloops-logo-transparent.png\"\n            alt=\"isoloops logo\"\n            className=\"h-10 w-10\"\n          />\n        </div>\n        <p className=\"text-gray-600 mb-6 italic\">Find the cleanest samples in the wild.</p>\n\n        {/* Surprise Me Button */}\n        {!surpriseSong ? (\n          <button\n            className=\"mb-6 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition\"\n            onClick={() => {\n              const randIndex = Math.floor(Math.random() * songsData.length);\n              setSurpriseSong(songsData[randIndex]);\n            }}\n          >\n            🎲 Surprise Me\n          </button>\n        ) : (\n          <button\n            className=\"mb-6 px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition\"\n            onClick={() => setSurpriseSong(null)}\n          >\n            ✖️ Clear Surprise\n          </button>\n        )}\n\n        {/* Filters (hidden during surprise view) */}\n        {!surpriseSong && (\n          <>\n            <div className=\"mb-4\">\n              <p className=\"text-sm font-semibold mb-2\">Genres:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                <Tag\n                  value=\"\"\n                  label=\"All\"\n                  active={genreFilter === ''}\n                  onClick={setGenreFilter}\n                  color=\"green\"\n                />\n                {genres.map((genre, idx) => (\n                  <Tag\n                    key={idx}\n                    value={genre}\n                    label={genre}\n                    active={genreFilter === genre}\n                    onClick={setGenreFilter}\n                    color=\"green\"\n                  />\n                ))}\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <p className=\"text-sm font-semibold mb-2\">Sample Types:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                <Tag\n                  value=\"\"\n                  label=\"All\"\n                  active={typeFilter === ''}\n                  onClick={setTypeFilter}\n                  color=\"blue\"\n                />\n                {sampleTypes.map((type, idx) => (\n                  <Tag\n                    key={idx}\n                    value={type}\n                    label={type.replace('_', ' ')}\n                    active={typeFilter === type}\n                    onClick={setTypeFilter}\n                    color=\"blue\"\n                  />\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Table */}\n        <SongTable songs={filteredSongs} /> {/* Pass filtered songs to SongTable */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';  // Optional: If you have a custom stylesheet\nimport App from './App';  // Your main App component\n\n// Render the app in the 'root' div element in index.html\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}